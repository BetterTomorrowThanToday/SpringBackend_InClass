name: AWS CI/CD
on:
  push:
    branches: ["main"]

permissions:
  id-token: write
  contents: read

env:
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECS_SERVICE: spring-service
  ECS_CLUSTER: ECS-SpringApp-Cluster-Fargate
  ECS_TASK_DEFINITION: ./task-definition.json
  CONTAINER_NAME: spring-app

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # 1. Java 17 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # GitHub Secrets에서 IP 주소를 가져와 application.yml 파일의 IP 설정 값 업데이트
      - name: Update IP in application.yml
        run: |
          sed -i "s/EC2_IP_ADDRESS/${{ secrets.EC2_IP_ADDRESS }}/g" src/main/resources/application.yml

      # GitHub Secrets에서 DB_USERNAME 및 DB_PASSWORD를 가져와 application.yml 파일에 업데이트
      - name: Update DB credentials in application.yml
        run: |
          sed -i "s/DB_USERNAME/${{ secrets.DB_USERNAME }}/g" src/main/resources/application.yml
          sed -i "s/DB_PASSWORD/${{ secrets.DB_PASSWORD }}/g" src/main/resources/application.yml

      #gradle build
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2.6.0
        with:
          arguments: build -x test

      #
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::590183755494:role/apiserver-role
          role-session-name: ecrPushSession
          aws-region: ap-northeast-2

      # 4. login
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2.0.1

      #5. 편의를 위한 latest 배포 + 버전 배포
      - name: Build and Push Image to AWS ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:latest
          docker push $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
          docker push $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:latest
          echo "image=$ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # 6.task를 수정하는 작업
      - name: Fill in the new image ID in the Amazon ECS Task Definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      # 7. ECS에 태스크를 배포
      - name: Deploy Amazon ECS Task Definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
